{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-10T10:47:09.379Z",
    "end": "2025-07-10T10:47:10.441Z",
    "duration": 1062,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "94b7f153-e4f6-4430-b07c-221524204e57",
      "title": "",
      "fullFile": "cypress/e2e/api/quote.cy.ts",
      "file": "cypress/e2e/api/quote.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c33f2923-c69b-4cbe-81e5-160f008f1534",
          "title": "MagpieFi API - Quote Endpoint Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should handle quote request with missing parameters",
              "fullTitle": "MagpieFi API - Quote Endpoint Tests should handle quote request with missing parameters",
              "timedOut": null,
              "duration": 266,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.apiRequest('GET', '/aggregator/quote')\n    .then((response) => {\n    expect(response.status).to.be.oneOf([400, 422]);\n    expect(response.body).to.have.property('message');\n    cy.log(`Missing params response: ${response.body.message}`);\n});",
              "err": {},
              "uuid": "ad063434-5208-4e24-9f58-0c5f22f3e803",
              "parentUUID": "c33f2923-c69b-4cbe-81e5-160f008f1534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle quote request with invalid network",
              "fullTitle": "MagpieFi API - Quote Endpoint Tests should handle quote request with invalid network",
              "timedOut": null,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = new URLSearchParams({\n    network: 'invalid-network',\n    fromTokenAddress: validQuoteParams.fromTokenAddress,\n    toTokenAddress: validQuoteParams.toTokenAddress,\n    sellAmount: validQuoteParams.sellAmount,\n    slippage: validQuoteParams.slippage.toString(),\n    gasless: validQuoteParams.gasless.toString()\n}).toString();\ncy.apiRequest('GET', `/aggregator/quote?${params}`)\n    .then((response) => {\n    expect(response.status).to.be.oneOf([400, 422, 500]);\n    expect(response.body).to.have.property('message');\n    cy.log(`Invalid network response: ${response.body.message}`);\n});",
              "err": {},
              "uuid": "56e19bd5-44b4-471f-8879-c7229bdd3b9f",
              "parentUUID": "c33f2923-c69b-4cbe-81e5-160f008f1534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle quote request with invalid token addresses",
              "fullTitle": "MagpieFi API - Quote Endpoint Tests should handle quote request with invalid token addresses",
              "timedOut": null,
              "duration": 132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = new URLSearchParams({\n    network: validQuoteParams.network,\n    fromTokenAddress: 'invalid-address',\n    toTokenAddress: 'invalid-address',\n    sellAmount: validQuoteParams.sellAmount,\n    slippage: validQuoteParams.slippage.toString(),\n    gasless: validQuoteParams.gasless.toString()\n}).toString();\ncy.apiRequest('GET', `/aggregator/quote?${params}`)\n    .then((response) => {\n    expect(response.status).to.be.oneOf([400, 422, 500]);\n    expect(response.body).to.have.property('message');\n    cy.log(`Invalid addresses response: ${response.body.message}`);\n});",
              "err": {},
              "uuid": "6cfa28cb-4545-4f20-adb5-0d7e268db959",
              "parentUUID": "c33f2923-c69b-4cbe-81e5-160f008f1534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle quote request with invalid sell amount",
              "fullTitle": "MagpieFi API - Quote Endpoint Tests should handle quote request with invalid sell amount",
              "timedOut": null,
              "duration": 137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = new URLSearchParams({\n    network: validQuoteParams.network,\n    fromTokenAddress: validQuoteParams.fromTokenAddress,\n    toTokenAddress: validQuoteParams.toTokenAddress,\n    sellAmount: 'invalid-amount',\n    slippage: validQuoteParams.slippage.toString(),\n    gasless: validQuoteParams.gasless.toString()\n}).toString();\ncy.apiRequest('GET', `/aggregator/quote?${params}`)\n    .then((response) => {\n    expect(response.status).to.be.oneOf([400, 422]);\n    expect(response.body).to.have.property('message');\n    cy.log(`Invalid amount response: ${response.body.message}`);\n});",
              "err": {},
              "uuid": "b214f4ab-56ee-401d-b1ad-80971478d89f",
              "parentUUID": "c33f2923-c69b-4cbe-81e5-160f008f1534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle quote request with invalid slippage",
              "fullTitle": "MagpieFi API - Quote Endpoint Tests should handle quote request with invalid slippage",
              "timedOut": null,
              "duration": 114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const params = new URLSearchParams({\n    network: validQuoteParams.network,\n    fromTokenAddress: validQuoteParams.fromTokenAddress,\n    toTokenAddress: validQuoteParams.toTokenAddress,\n    sellAmount: validQuoteParams.sellAmount,\n    slippage: '2', // Invalid slippage > 1\n    gasless: validQuoteParams.gasless.toString()\n}).toString();\ncy.apiRequest('GET', `/aggregator/quote?${params}`)\n    .then((response) => {\n    expect(response.status).to.be.oneOf([400, 422]);\n    expect(response.body).to.have.property('message');\n    cy.log(`Invalid slippage response: ${response.body.message}`);\n});",
              "err": {},
              "uuid": "03fd03ac-8d36-4622-8ec6-e93b515cf29a",
              "parentUUID": "c33f2923-c69b-4cbe-81e5-160f008f1534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate quote endpoint response structure",
              "fullTitle": "MagpieFi API - Quote Endpoint Tests should validate quote endpoint response structure",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test with known token addresses that might exist\nconst params = new URLSearchParams({\n    network: 'ethereum',\n    fromTokenAddress: '0x0000000000000000000000000000000000000000', // ETH\n    toTokenAddress: '0xA0b86a33E6441d2e8f4F0F2f2d8f0F2f2d8f0F2f', // Sample token\n    sellAmount: '1000000000000000000',\n    slippage: '0.01',\n    gasless: 'false'\n}).toString();\ncy.apiRequest('GET', `/aggregator/quote?${params}`)\n    .then((response) => {\n    // Log the response for debugging\n    cy.log(`Quote response status: ${response.status}`);\n    cy.log(`Quote response body: ${JSON.stringify(response.body)}`);\n    // The response should have a proper structure regardless of success/failure\n    expect(response.body).to.have.property('message');\n    // If it's a successful quote (status 200), validate the structure\n    if (response.status === 200) {\n        expect(response.body).to.have.property('quote');\n        expect(response.body.quote).to.have.property('sellAmount');\n        expect(response.body.quote).to.have.property('buyAmount');\n    }\n});",
              "err": {},
              "uuid": "812dfd31-e61a-4a9e-990a-765a59f60e5a",
              "parentUUID": "c33f2923-c69b-4cbe-81e5-160f008f1534",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test performance of quote endpoint",
              "fullTitle": "MagpieFi API - Quote Endpoint Tests should test performance of quote endpoint",
              "timedOut": null,
              "duration": 113,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = Date.now();\nconst params = new URLSearchParams({\n    network: 'ethereum',\n    fromTokenAddress: '0x0000000000000000000000000000000000000000',\n    toTokenAddress: '0xA0b86a33E6441d2e8f4F0F2f2d8f0F2f2d8f0F2f',\n    sellAmount: '1000000000000000000',\n    slippage: '0.01',\n    gasless: 'false'\n}).toString();\ncy.apiRequest('GET', `/aggregator/quote?${params}`)\n    .then((response) => {\n    const responseTime = Date.now() - startTime;\n    cy.log(`Quote endpoint response time: ${responseTime}ms`);\n    // Quote endpoint should respond within 10 seconds\n    expect(responseTime).to.be.lessThan(10000);\n    // Should return some response (even if error)\n    expect(response.body).to.have.property('message');\n});",
              "err": {},
              "uuid": "616ee9e1-a275-40a9-aab9-20720cad59a8",
              "parentUUID": "c33f2923-c69b-4cbe-81e5-160f008f1534",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad063434-5208-4e24-9f58-0c5f22f3e803",
            "56e19bd5-44b4-471f-8879-c7229bdd3b9f",
            "6cfa28cb-4545-4f20-adb5-0d7e268db959",
            "b214f4ab-56ee-401d-b1ad-80971478d89f",
            "03fd03ac-8d36-4622-8ec6-e93b515cf29a",
            "812dfd31-e61a-4a9e-990a-765a59f60e5a",
            "616ee9e1-a275-40a9-aab9-20720cad59a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 991,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}